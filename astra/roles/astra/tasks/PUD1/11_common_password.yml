---
   # проверяемые строки

   # password required pam_pwhistory.so remember=24
   # pam_unix.so sha512 shadow use_authtok

   # 
   
   # /etc/pam.d/common-password

    # - name: ПУД1 | проверка существования строк 
    #   become: yes
    #   shell: 'if egrep -q {{item}} /etc/pam.d/common-password ; then echo yes; else echo no; fi'
    #   loop:
    #     - password_auth_exists
    #     - pam_unix_exists
    #   changed_when: false
    #   failed_when: false
    #   # ignore_errors: true
    #   register: var_passwords_set
    #   tags:
    #     - common_password

    # - name: ПУД1 | печать проверки существования строк
    #   debug: 
    #     msg: 
    #       # - "password is set for all: {{ (var_passwords_set.stdout_lines == []) | ternary('true', 'false')}}"
    #       - "{{  item.0 }} is exists: {{  item.1.stdout }}"  
    #   loop: "{{['password', 'pam_unix'] | zip(var_passwords_set.results) | list }}"      # 
    #   ignore_errors: true
    #   when: var_passwords_set is defined
    #   tags:
    #     - common_password


    - name: ПУД1 | проверка сопадения с эталоном строк 
      become: yes
      shell: "{{item}}"
      loop:
        - "{{pswd_auth_1}}"
        - "{{pam_unix_1}}"
        - "{{pam_unix_2}}"
      changed_when: false
      failed_when: false
      # no_log: true
      # ignore_errors: true
      register: var_passwords_active
      # no_log: true
      tags:
        - common_password
        # - system_auth

    - name: ПУД1 | проверка наличия и активности локальных параметров пароля в /etc/pam.d/common-password
      debug: 
        msg: 
          - "  "
          # - "----------------строка эталон-----------------------  "
          # - "\'{{  item.0 }}\' is present: {{  (item.1.stdout_lines == []) | ternary('no', 'yes') }}"  
          - "----------------------------------------------------  "
          - "-- {{item.0}} => {{(not ((item.1).rc)) | ternary('да', 'нет')}}"
          # - " ------>>>> "
          - "----------------------------------------------------  "
          # - "  "
      # loop: "{{['password required pam_pwhistory.so remember=24', 'pam_unix.so sha512 shadow use_authtok'] | zip(var_passwords_active.results) | list }}"      #
      loop: "{{ (etalon_params) | zip(var_passwords_active.results) | list }}"
      ignore_errors: true
      # when: var_passwords_set is defined
      tags:
        - common_password
        - write_log

    - name: ПУД1 | проверка совпадения параметров локального пароля с эталонным значением
      become: yes
      shell: "echo {{(var_passwords_active.results)[2].stdout}} | egrep {{params_regex}}"
      loop: "{{pwquality_var}}"
      changed_when: false
      failed_when: false
      # no_log: true
      # ignore_errors: true
      when: (var_passwords_active.results)[2].stdout != ''
      register: var_passwords_params
      # no_log: true
      tags:
        - common_password

    - name: ПУД1 | проверка совпадения параметров локального пароля с эталонным значением
      debug: 
        msg: 
          - "  "
          - "----------------------------------------------------  "
          # - "\'{{  item.0 }}\' is present: {{  (item.1.stdout_lines == []) | ternary('no', 'yes') }}"  
          - "-->> '{{ (item.0)[:] | join(' ') }}' => {{(item.1.stdout != '') | ternary('да', 'нет')}}              "
          - "----------------------------------------------------  "
          # - "  "
      # loop: "{{['password required pam_pwhistory.so remember=24', 'pam_unix.so sha512 shadow use_authtok'] | zip(var_passwords_active.results) | list }}"      #
      loop: "{{(pwquality_var) | zip(var_passwords_params.results) | list}}"
      when: (var_passwords_active.results)[2].stdout != ''
      ignore_errors: true
      # when: var_passwords_set is defined
      tags:
        - common_password
        - write_log

    # - name: ПУД1 | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    #   debug: 
    #     msg: 
    #       - "  "
    #       - "----------------------------------------------------  "
    #       # - "\'{{  item.0 }}\' is present: {{  (item.1.stdout_lines == []) | ternary('no', 'yes') }}"  
    #       - "{{ (var_passwords_active.results)[2].stdout }}"
    #       - "----------------------------------------------------  "
    #       - "  "
    #   # loop: "{{['password required pam_pwhistory.so remember=24', 'pam_unix.so sha512 shadow use_authtok'] | zip(var_passwords_active.results) | list }}"      #
    #   ignore_errors: true
    #   # when: var_passwords_set is defined
    #   tags:
    #     - common_password

    - name: ПУД1 | загрузка файла /etc/pam.d/common-password
      fetch:
        flat: yes
        dest: "{{playbook_dir}}/all_info/{{ansible_ssh_host}}/"
        src: "/etc/pam.d/common-password"
      tags:
        - common_password
