--- 
    # требются уточнения 
    # не использовать без согласования

    - block:

        - name: ПУД1 | проверка активных пользователей
          become: yes
          raw: 'getent passwd | egrep "(bash|sh)" | cut -d: -f1 | sort -n' # sh - 
          failed_when: var_passwords_set_1.rc not in [0, 1]
          register: var_passwords_set_1
          tags:
            - pw_quality_3

        - name: фильтрация списка активных пользователей
          set_fact:
            var_active_users: "{{ var_passwords_set_1.stdout | regex_replace('^[\\r\\n\\t]+','') | regex_replace('[\\r\\n\\t]+$','') | regex_replace('[\\r\\n\\t]+','\n') }}"
          tags:
            - pw_quality_3

        - name: группировка
          no_log: true
          set_fact:
            var_au: "{{  var_au | default([]) + [ item | trim ]  }}"
          with_items: "{{ (var_active_users).split('\n') }}"
          tags:
            - pw_quality_3

        - name: ПУД1 | проверка аткивных УЗ без заданного пароля
          become: yes
          raw: 'cat /etc/shadow | egrep "^{{ item }}:([\*\!]|[\!]{2}|):" ' 
          loop: "{{ var_au }}"
          failed_when: var_passwords_set.rc not in [0, 1]
          register: var_passwords_set
          tags:
            - pw_quality_3

        - name: группировка 2
          no_log: true
          set_fact:
            var_np: "{{  var_np | default([]) + [ item.stdout | trim ] | select()  }}"
          with_items: "{{ (var_passwords_set.results) }}"
          tags:
            - pw_quality_3

        - name: ПУД1 | проверка активных УЗ без пароля
          debug: 
            msg: 
              - " Активные УЗ без пароля {{ ( var_np == [] )| ternary('Отсутствуют, внизу должно быть пусто', 'Есть, список внизу')}}            "
              - "----------------------------------------------------------  "
              - "{{ var_np }}"
              - "----------------------------------------------------------  "
          tags:
            - pw_quality_3
            - write_log

        # - name: summary +
        #   shell: "printf '%-20s %15s\n' 'pw_quality_3 => ' {{(var_passwords_set.results)[:] | map(attribute='stdout') | list is any | ternary('False', 'True')}} | tee -a  {{log_var}}"
        #   delegate_to: localhost
        #   tags:
        #     - always

        - name: результат прохождения проверок
          set_fact:
            task_result: "{% set passed = ( var_np == [] ) %}{{passed}}"
          tags:
            - pw_quality_3

        - include_tasks: ../summary/sum.yml
          vars:
            task_tag: "{% set tg = 'pw_quality_3' %}{{ tg }}"
            task_res: "{{ task_result }}"
          tags:
            - pw_quality_3

      rescue:

        - include_tasks: ../summary/rescue.yml
          vars:
            task_tag_rescue: "{% set tgr = 'pw_quality_3' %}{{tgr}}"
          tags:
            - always