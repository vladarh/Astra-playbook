---
    - block:
          
        - name: ПУД 1 | Сохранить список пользователей в sssd с разрешённым входом
          become: yes
          raw: "grep ^simple_allow_users /etc/sssd/sssd.conf | sed 's/^.*=[[:space:]]*//' | tr ',' '\n' | sort -n"
          failed_when: var_get_allowed_user.rc not in [0, 1] 
          no_log: true
          register: var_get_allowed_user
          tags:
            - ad_user_list

        - name: фильтрация списка пользователей
          set_fact:
            var_glu: "{{ var_get_allowed_user.stdout | regex_replace('^[\\r\\n\\t]+','') | regex_replace('[\\r\\n\\t]+$','') | regex_replace('[\\r\\n\\t]+','\n') }}"
          tags:
            - ad_user_list

        - name: группировка
          set_fact:
            var_allowed_users: "{{  var_allowed_users | default([]) + [ item | trim ]  }}"
          with_items: "{{ (var_glu).split('\n') }}"
          tags:
            - ad_user_list

        - name: ПУД 1 | Список пользователей с разрешённым входом /etc/sssd/sssd.conf
          debug:
            msg: 
              - "     "
              - "--------------------------------------------------"
              - "{{ var_allowed_users  }}"
              - "--------------------------------------------------"
          tags:
            - ad_user_list
            - write_log

        - name: ПУД 1 | Сохранение эталонного списка пользователей с разрешённым входом
          become: yes
          # путь к файлу прописать!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
          # >>>>>>>>>>>>>>>>|||||||||||||||||||||||||||||||||||||||<<<<<<<<<
          command: sort -n "{{ playbook_dir }}/files/tmp/ad_user"  #Вывод отсортированного по алфавиту списка эталонных пользователей
          delegate_to: localhost
          register: var_get_allowed_user_etalon # сохранение вывода в переменную
          tags:
            - ad_user_list
        # - name: ПУД 1 Вывод эталонного списка пользователей с разрешённым входом
        #   debug:
        #     msg: "{{ var_get_allowed_user_etalon.stdout_lines }}"
        #   tags:
        #     - ad_user_list

        - name: ПУД 1 | Сохранение содержимого "переменных списков" в виде списка
          become: yes
          set_fact:
            # verification_list: "{{ var_get_userlist.stdout_lines }}"
            # etalon_list: "{{ var_get_userlist_etalon.stdout_lines }}"
            var_allowed_user_not_in_etalon: "{{ var_allowed_users | difference(var_get_allowed_user_etalon.stdout_lines)}}" # строки "списка разрешенных пользователей" НЕ содержащиеся в "эталоном списке разрешённых"
          tags:
            - ad_user_list
      
        - name: ПУД 1 | Список пользователей НЕ содержащихся в эталонном списке ad_user
          debug: 
            msg: 
              # - "Total rows : {{ var_allowed_user_not_in_etalon | length }}" # вывод строк не содержащихся в эталонном файле
              - "     "
              - "--------------------------------------------------"
              - "{{ var_allowed_user_not_in_etalon }}"          #
              - "--------------------------------------------------"
          when: var_get_allowed_user # исполнение TASK, если "cписок пользователей" не пустой
          tags:
            - ad_user_list
            - write_log

        # - name: ПУД 1 | загрузка файла /etc/sssd/sssd.conf
        #   fetch:
        #     flat: yes
        #     dest: "{{playbook_dir}}/all_info/{{ansible_ssh_host}}/"
        #     src: "/etc/sssd/sssd.conf"
        #   tags:
        #     - ad_user_list


        # - name: summary +
        #   shell: "printf '%-20s %15s\n' 'ad_user_list => ' {{(var_allowed_user_not_in_etalon == []) | ternary('true', 'false')}} | tee -a  {{log_var}}"
        #   delegate_to: localhost
        #   tags:
        #     - always

        - name: результат прохождения проверок
          set_fact:
            task_result: "{% set tg = (var_allowed_user_not_in_etalon == []) %}{{ tg }}"
          tags:
            - ad_user_list

        - include_tasks: ../summary/sum.yml
          vars:
            task_tag: "{% set tg = 'ad_user_list' %}{{ tg }}"
            task_res: "{{ task_result }}"
          tags:
            - ad_user_list

      rescue:

        - include_tasks: ../summary/rescue.yml
          vars:
            task_tag_rescue: "{% set tgr = 'ad_user_list' %}{{tgr}}"
          tags:
            - always