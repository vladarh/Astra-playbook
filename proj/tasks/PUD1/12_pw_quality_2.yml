--- 
    - block:

        - name: ПУД1 | проверка, что файл "/etc/security/pwquality.conf" есть
          become: yes
          raw: "test -f /etc/security/pwquality.conf"
          failed_when: var_file_exists.rc
          register: var_file_exists
          tags:
            - pw_quality_2

        - name: ПУД1 | эталонные параметры локального пароля 
          become: yes
          raw: 'egrep "^[[:space:]]*{{ item[0] }}[[:space:]]*{{ item[1] }}[[:space:]]*{{ item[2] }}[[:space:]]*$" /etc/security/pwquality.conf'
          loop: "{{ pwquality_var }}"
          failed_when: var_pw_quality_active_2.rc not in [0, 1]
          register: var_pw_quality_active_2
          tags:
            - pw_quality_2

        - name: ПУД1 | проверка параметров пароля /etc/security/pwquality.conf
          debug:
            msg: 
              - "{{'{:<5}{:<4}=> '.format(''.join([item[0][0], item[0][1]]), item[0][2]).ljust(24, ' ')}}{{ (not item[1].rc ) | ternary('задан', 'не задан')}}"
          loop: "{{ pwquality_var[:] | zip(var_pw_quality_active_2.results) | list}}"
          loop_control:
            label: ""
          tags:
            - pw_quality_2
            - write_log

    #     - name: ПУД1 | загрузка файла
    #       fetch:
    #         flat: yes
    #         dest: "{{playbook_dir}}/all_info/{{ansible_ssh_host}}/"
    #         src: "/etc/security/pwquality.conf"
    #       tags:
    #         - pw_quality_2

        # - name: ПУД1 | параметры
        #   debug:
        #     msg: 
        #       - "{{  (var_pw_quality_active_2.results)[:] | map(attribute='stdout_lines') | list is any }}"
        #   ignore_errors: true
        #   tags:
        #     - pw_quality_2
        #     - write_log

        - name: результат прохождения проверок
          set_fact:
            task_result: "{% set passed = ( ( var_pw_quality_active_2.results )[:] | map(attribute='rc') | list |  max == 0  ) %}{{passed}}"
          tags:
            - pw_quality_2

        - include_tasks: ../summary/sum.yml
          vars:
            task_tag: "{% set tg = 'pw_quality_2' %}{{ tg }}"
            task_res: "{{ task_result }}"
          tags:
            - pw_quality_2

      rescue:

        - include_tasks: ../summary/rescue.yml
          vars:
            task_tag_rescue: "{% set tgr = 'pw_quality_2' %}{{ tgr }}"
          tags:
            - always